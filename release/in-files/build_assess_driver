#!/bin/bash

p=`basename $0`

# A string with command options
options=$@

# An array with all the arguments
arguments=("$@")

framework_module=script_assess
framework_cmd=(python3 -B -m "$framework_module")

# Loop index
index=0

for argument in "$@"; do
    # Incrementing index
    index=`expr $index + 1`

    # The conditions
    case $argument in
	--in-dir) 
	    VMINPUTDIR=${arguments[index]};;
	--out-dir) 
	    VMOUTPUTDIR=${arguments[index]};;
	--base-dir)
	    echo "";;
	--plat-name)
	    export VMPLATNAME=${arguments[index]};;
	--plat-uuid)
	    VMPLATUUID=${arguments[index]};;
	--os-pkg-install-cmd)
	    export VMOSPACKAGEINSTALL=${arguments[index]};;
	--version)
        version_file="$(dirname "$0")/build_assess_driver_version.txt"
        version=$(cat "$version_file")
        echo "$framework_module $version"
	    exit 0;;
    esac
done

## export these for subsequent use
export VMINPUTDIR
export VMOUTPUTDIR

## XXX can also be $HOME
export SWAMP_DIR=/opt/swamp-base

function untar {
    tar xpf "$1" --directory="$2" && { tar tf "$1" | cut -d / -f 1 | uniq; }
}

function get_conf_value {
	local param="$1"
	local conf_file="$2"

	## [ space tab ] portable regex
	## was -r extended regex and '\s' for whitespace, and () unescaped
	## \([]*\)* vs + because it might be empty, or null
	sed -n "/^${param}[ 	]*=/ s@^${param}[ 	]*=[ 	]*\([^ 	]*\)[ 	]*@\1@p" "$conf_file"
}

if [[ -z "$VMOSPACKAGEINSTALL" ]]; then
    export VMOSPACKAGEINSTALL="$VMINPUTDIR/install-dependencies"
fi

if [[ -z "$VMPLATNAME" ]]; then
    export VMPLATNAME=$("$VMINPUTDIR/get-platform")
fi

## Only use sudo if it is needed
if [ `id -u` -eq 0 ] ; then
	asroot=
else
	asroot=sudo
fi


OPT_SWAMP_DIR=/opt/swamp
OPT_SWAMP_BASE_DIR=/opt/swamp-base

[[ ! -d $OPT_SWAMP_DIR ]] && $asroot mkdir -p $OPT_SWAMP_DIR

## XXX this should never be done, swamp-base is setup by run.sh
## and MUST point at the user's directory.   It is carried over from
## other frameworks which did it, just realized the error in August 2017
[[ ! -d $OPT_SWAMP_BASE_DIR ]] && mkdir -p $OPT_SWAMP_BASE_DIR


echo
echo $p: installing node.js

if [[ "$(uname -p)" == "x86_64" ]]; then 
	NODE_ARCHIVE="NODE_64_BINARY"
else
	NODE_ARCHIVE="NODE_32_BINARY"
fi

echo $p: $NODE_ARCHIVE: selected

NODE_ARCHIVE="$VMINPUTDIR/$NODE_ARCHIVE"

NODE_DIR=$(untar $NODE_ARCHIVE $OPT_SWAMP_BASE_DIR)
[[ $? == 0 ]] && export PATH="$OPT_SWAMP_BASE_DIR/$NODE_DIR/bin:$PATH"

## XXX do python versioning in the future ... once the tarballs are
## renamed for which python version they contain, instead of python[23]

echo
echo $p: setting up python

## XXXX only install python for python-assess; no use on other frameworks
PYTHON2_VER=2.7.10
PYTHON2_TB=python-2-bin.tar.gz
PYTHON2_VNAME=python-$PYTHON2_VER
PYTHON2_DIR=$OPT_SWAMP_DIR/$PYTHON2_VNAME
PYTHON2_SDIR=python2			## slink name for now
py2_ok=false

## XXX we always look for the FULL VERSION dir; if it is missing,
## unpack the tarball beacause the version might differ from that
## already installed on a VM.
## only install it if the VM lacks it

if [ ! -d $PYTHON2_DIR ] ; then
	tb="$VMINPUTDIR/$PYTHON2_TB"
	if [ -f "$tb" ] ; then
		echo $p: $PYTHON2_TB: installing python2
		$asroot tar xfp "$tb" -C $OPT_SWAMP_DIR
		s=$?
		if [ $s -eq 0 ] ; then
			py2_ok=true
		fi
	else
		echo $p: $PYTHON2_TB: $PYTHON2_VER: missing python2 tarball
	fi
else
	echo $p: $PYTHON2_VNAME: pre-installed on VM
	py2_ok=true
fi
if $py2_ok ; then
	export SWAMP_PYTHON2_HOME="$OPT_SWAMP_DIR/$PYTHON2_SDIR"

	# && \
	#sudo $SWAMP_PYTHON2_HOME/bin/pip install --upgrade pip
fi

PYTHON3_VER=3.4.3
PYTHON3_TB=python-3-bin.tar.gz
PYTHON3_VNAME=python-$PYTHON3_VER
PYTHON3_DIR=$OPT_SWAMP_DIR/$PYTHON3_VNAME
PYTHON3_SDIR=python3			## slink name for now
py3_ok=false

if [ ! -d $PYTHON3_DIR ] ; then
	tb="$VMINPUTDIR/$PYTHON3_TB"
	if [ -f "$tb" ] ; then
		echo $p: $PYTHON3_TB: installing python3
		$asroot	tar xfp "$tb" -C $OPT_SWAMP_DIR 
		s=$?
		if [ $s -eq 0 ] ; then
			py3_ok=true
		fi
	else
		echo $p: $PYTHON3_TB: $PYTHON3_VER: missing python3 tarball
	fi
else
	echo $p: $PYTHON3_VNAME: pre-installed on VM
	py3_ok=true
fi
if $py3_ok ; then
	export SWAMP_PYTHON3_HOME="$OPT_SWAMP_DIR/python3"

	# && \
	#sudo $SWAMP_PYTHON3_HOME/bin/pip install --upgrade pip && \
	#$SWAMP_PYTHON3_HOME/bin/pip install wheel
fi

echo
echo $p: setup environment
export BUILD_DIR="${HOME}/build"
export TOOL_DIR="${HOME}/tool"
export RESULTS_DIR="${HOME}/results"
export SCRIPTS_DIR=${HOME}/$(untar "${VMINPUTDIR}/scripts.tar.gz" "$PWD")
#export SCRIPTS_DIR="${HOME}/scripts"
export PYTHONPATH="${SCRIPTS_DIR}/lib:${PYTHONPATH}"

echo
echo $p: start script_assess
set -x -v
"${framework_cmd[@]}" --printVersion --printPlatform --inputDir "$VMINPUTDIR" --outDir "$VMOUTPUTDIR" --buildDir "$BUILD_DIR" --toolDir "$TOOL_DIR" --resultsDir "$RESULTS_DIR"
