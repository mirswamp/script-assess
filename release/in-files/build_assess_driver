#!/bin/bash

p=`basename $0`

# A string with command options
options=$@

# An array with all the arguments
arguments=($options)

# Loop index
index=0

for argument in $options; do
    # Incrementing index
    index=`expr $index + 1`

    # The conditions
    case $argument in
	--in-dir) 
	    VMINPUTDIR=${arguments[index]};;
	--out-dir) 
	    VMOUTPUTDIR=${arguments[index]};;
	--base-dir)
	    echo "";;
	--plat-name)
	    export VMPLATNAME=${arguments[index]};;
	--plat-uuid)
	    VMPLATUUID=${arguments[index]};;
	--os-pkg-install-cmd)
	    export VMOSPACKAGEINSTALL=${arguments[index]};;
	--version)
	    exit 0;;
    esac
done

## XXX can also be $HOME
swamp_dir=/opt/swamp-base
## where rvm is being installed
rvm_path="$swamp_dir/.rvm"
## what we run to setup an rvm environment
rvm_cmd="$rvm_path/scripts/rvm"

## tarball with rvm and perhaps DEFAULT_RUBY ruby built-in
rvm_tarball="$VMINPUTDIR/rvm.tar.gz"
## old style needs to strip out things; new makes it easy
old_rvm_tarball=true

function untar {
    tar -xf "$1"
	tar tzf "$1" | cut -d / -f 1 | uniq
}

function get_conf_value {
	local param="$1"
	local conf_file="$2"

	## [ space tab ] portable regex
	## was -r extended regex and '\s' for whitespace, and () unescaped
	## \([]*\)* vs + because it might be empty, or null
	sed -n "/^${param}[ 	]*=/ s@^${param}[ 	]*=[ 	]*\([^ 	]*\)[ 	]*@\1@p" "$conf_file"
}


## Install RVM from a tarball which already has a ruby installed
function rvm_install_tarball {

	echo $p: untar $rvm_tarball
	mkdir -p $rvm_path || exit 1

	if $old_rvm_tarball ; then
		tar xf "$rvm_tarball" -C "$rvm_path"  --strip-components=3
	else
		tar xf "$rvm_tarball" -C "$swamp_dir"
	fi
	s=$?
	if [ $s -ne 0 ] ; then
		echo $p: unpack tar failed status=$s 1>&2
		exit 1
	fi
		

	### XXX this generates errors with strip-components

	if [[ ! -f "$rvm_cmd" ]] ; then
		echo $p: rvm failed during setup 1>&2
		exit 1
	fi
}


## This is called if the full dependencies for rvm are needed
function load_rvm_dependencies {

	## yamel-devel is needed to compile a new ruby
	## curl is needed for rvm to download things.
	extra_pkgs=
	case $VMPLATNAME in
	ubuntu*|debian*)
		extra_pkgs="curl libyaml-dev"
		;;
	fedora-19*)
		## not needed,works out of the box
#		extra_pkgs="openssl openssl-libs"
		;;
	scientific*|rhel*|centos*)
		extra_pkgs=libyaml-devel
		;;
	esac
	if [ -n "$extra_pkgs" ] ; then
		depfile=$VMINPUTDIR/ruby-vm-deps-build.conf
		echo "dependencies-${VMPLATNAME}=$extra_pkgs" >$depfile
		echo install extra pkgs for rvm to make a ruby
		$VMOSPACKAGEINSTALL $depfile
		## XXX no error handling matches existing code
	fi
}

function rvm_setup {
	local	PKG_LANG=
	local	extra_pkgs=
	local	t=

	## not possible to detect all rvm install errors
	if [ ! -f $rvm_cmd ] ; then
		echo $p: $rvm_cmd: missing -- rvm not available 1>&2
		exit 1
	fi
	source "$rvm_cmd"

	## this just errors if the last status-producing
	## command in the script errors;
	## a sourced script has no exit status of its own.
	if [[ $? -ne 0 ]] ; then
		echo $p: error with rvm script, exiting 1>&2
		exit 1
	fi

	## RVM takes care of this
#	export PATH="$rvm_path/bin:$PATH"

	t="$VMINPUTDIR/package.conf" 
	if [[ -f "$t" ]] ; then
		PKG_LANG=$(get_conf_value 'package-language-version' "$t" )
		s=$?
		if [ $s -ne 0 ] ; then
			echo $p: package-language-version fails, status=$s 1>&2
			exit 1
		elif [ -z "$PKG_LANG" ] ; then
			echo $p: package-language-version not specified 1>&2
			PKG_LANG=$DEFAULT_RUBY
		fi
	fi
	if [ -z "PKG_LANG" ] ; then
		## not specified, use the default one to ensure it is available
		PKG_LANG=$DEFAULT_RUBY
	fi

	## that ruby is already installed
	if [[ "$PKG_LANG" != "$INSTALLED_RUBY" ]] ; then

		echo $p: INSTALLING non-available "$PKG_LANG"

		## get the extra parts needed for rvm to configure a ruby
		load_rvm_dependencies
		if [ $? -ne 0 ] ; then
			echo $p: rvm dependencies failed, abort 1>&2
			exit 1
		fi

		echo $p: RVM AUTOLIBS READ-ONLY
		rvm autolibs read-only
		s=$?
		if [ $s -ne 0 ] ; then
			echo $p: autolibs failed, status=$s 1>&2
		fi

		echo $p: === RVM INSTALL $PKG_LANG	
		rvm install "$PKG_LANG"
		s=$?
		if [[ $s -ne 0 ]]; then
			echo $p: failed status=$s, default to "$DEFAULT_RUBY" 1>&2
			## install failed, nothing more to do.
			exit 1
			PKG_LANG="$DEFAULT_RUBY"
		fi
	fi

	## XXX this is not needed, rvm is already setup to use it's built-in
	## 
	echo $p: === RVM USE "$PKG_LANG"
	rvm use "$PKG_LANG"

}

function rvm_install_net {
	## we will need the dependencies doing it this way
	load_rvm_dependencies

	echo $p: ====== FETCH rvm gpg keys ======

	## XXX magic numbers
	gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
	s=$?
	echo $p: ====== DONE rvm gpg keys ======
	if [ $s -ne 0 ] ; then
		echo $p: status=$s: rvp gpg key fetch failed 1>&2
		exit 1
	fi

	## save the script for error processing if something goes wrong
	## globals
	rvm_script=$VMOUTPUTDIR/get.rvm.io.sh
	rvm_url="https://get.rvm.io"
	#    curl -sSL "$rvm_url" | bash -s stable
	echo $p: ====== FETCH get.rvm.io script ======
	## stderr output log for wget in records
	## -nv provides some output and error conditions for logging.
	# wget -nv -O "$rvm_script" "$rvm_url"
	## use curl because the GPG signature is not done correctly,
	## and wget's strict certificate checking causes failures.
	curl -sSL "$rvm_url" > "$rvm_script" 
	s=$?
	echo $p: ====== FETCHED get.rvm.io script ======
	if [ $s -eq 0 ] ; then
# can't check syntax; it may fail on some platforms, but the script
# itself tries to run correctly on any bash version .. won't pass
# syntax checks on each of those bashes, however
#	if bash -n $rvm_script ; then
		echo $p: ====== PROCESS get.rvm.io script ======
		bash -s stable < $rvm_script
		s=$?
		echo $p: ====== FINSISH get.rvm.io script ======
		if [ $s -ne 0 ] ; then
			echo $p: status=$s: "$rvm_url" script finsihed with errors 1>&2
		fi
#	else
#		echo $p: $rvm_script: $rvm_url script has errors NOT EXECUTED 1>&2
#		echo $p: continuing blindly as before
#	fi

		## NOT SO, just mark as no installed rubies
		## now configure RVM
		if [ -s "$rvm_cmd" ] ; then
			## this is done by rvm_setup
#			source "$rvm_cmd"
			## error check like elsewhere?
			## XXX should set path correctly
			echo PATH=$PATH

			## it is fresh & knows no rubies, so we have none
			INSTALLED_RUBY=
		else
			echo $p: $rvm_cmd: rvm script not available 1>&2
			exit 1
		fi
	fi
}

if [[ -z "$VMOSPACKAGEINSTALL" ]]; then
    export VMOSPACKAGEINSTALL="$VMINPUTDIR/install-dependencies"
fi

if [[ -z "$VMPLATNAME" ]]; then
    export VMPLATNAME=$("$VMINPUTDIR/get-platform")
fi

## XXX no longer necessary ,see bolo to do this right.
#sudo yum erase ruby.x86_64 -y

## 
echo
## XXX VMOSPACKAGEINSTALL needs package options or something
## XXX rhel specific packages here ... not a real dependency
## Create fake dep file for os dependencies
## it could be in /tmp since VMINPUTDIR maybe R/O
deps=
depfile=$VMOUTPUTDIR/ruby-vm-deps.conf
if [ -f /etc/redhat-release ] ; then
	deps="libyaml-devel"
	# just the lib is needed for a runtime; -devel needed for building it
	deps="libyaml"
elif [ -f /etc/debian_version ] ; then
	deps="libyaml-dev"
	# just the lib is needed for a runtime
	deps=
else
	echo $p: $VMPLATNAME: no idea how to install libyaml-devel 1>&2
fi
if [ -n "$deps" ] ; then
	echo $p: Force-Install libyaml before ruby install
	echo "dependencies-${VMPLATNAME}=$deps" >$depfile
	$VMOSPACKAGEINSTALL $depfile
fi

## correctly log rvm output w/out positioning commands
SAVE_TERM="$TERM"
export TERM=dumb

## Select the default version .. could propogate from automation
## XXXX no, put something in $VMINPUTDIR, or find it in the ruby tarball
## XXX or name of ruby tarball
#DEFAULT_RUBY="ruby-2.2.3"
OLD_DEFAULT_RUBY="ruby-2.3.0"

## don't know what is available; could be list too
INSTALLED_RUBY=

echo
rvm_installed=false
rvm_version_set=false

## Detect the new-style versiond ruby rvm.
## glob doesn't match old-style rvm.tar.gz or rvm.tar
rvm=`ls $VMINPUTDIR/rvm-*.tar 2>/dev/null`

if [ -n "$rvm" ] ; then
	echo $p: new-style versioned rvm
	## sanity check
	w=`echo "$rvm" | wc -w`
	if [ $w -ne 1 ] ; then
		echo $p: "$rvm": MULTIPLE RVM FOUND 1>&2
		rvm=`expr "$rvm" : '\([^ 	]*\).*'`
		echo $p: $rvm: USING THIS ONE 1>&2
		## could error out as well
	fi

	brvm=`basename $rvm`
	ver=`expr "$brvm" : 'rvm-\([0-9.-]*\).tar'`
	if [ -z "$ver" ] ; then
		echo $p: ruby version missing, fallback $OLD_DEFAULT_RUBY
	else
		DEFAULT_RUBY="ruby-$ver"
		rvm_tarball="$rvm"
		old_rvm_tarball=false
		rvm_version_set=true
		echo $p: $DEFAULT_RUBY from $rvm_tarball
	fi
fi

if [ -z "$DEFAULT_RUBY" ] ; then
	DEFAULT_RUBY=$OLD_DEFAULT_RUBY
fi

## newer faster version
if [ ! -f "$rvm_tarball" ] ; then
	## check for non-compressed version
	t=`basename "$rvm_tarball" .gz`
	t="$VMINPUTDIR/$t"
	if [ -f "$t" ] ; then
		rvm_tarball="$t"
		old_rvm_tarball=false
	fi
fi

## OK, need a different ruby in some cases
case $VMPLATNAME in
rhel-5.*-32|centos-5.*-32|scientific-5.*-32)
	## ruby-2.3.0 has known bugs in this config
	## The packaged ruby is different -- should have version
	## numbers instead of this magic!
	## XXX This doesn't work because
	if $rvm_version_set ; then
		:
	else
		DEFAULT_RUBY="ruby-2.2.4"
		echo $p: over-ride ruby to $DEFAULT_RUBY
	fi
	;;
esac

net_rvm_setup=false
	

if [ -f "$rvm_tarball" ] ; then
	echo $p: install rvm from tarball "$rvm_tarball"
	rvm_install_tarball
	s=$?
	if [ $s -eq 0 ] ; then
		INSTALLED_RUBY=$DEFAULT_RUBY
	fi
else
	## XXX should always have a RVM to use .. but latest is OK, I guess.
	echo $p: install rvm from net
	rvm_install_net
	s=$?
	## we might have a rvm ... and then a ruby
	if [ $s -eq 0 ] ; then
		net_rvm_setup=true
	fi
fi
if [ $s -eq 0 ] ; then
	rvm_installed=true
fi
if $rvm_installed ; then
	echo
	echo $p: rvm_setup DEFAULT_RUBY=$DEFAULT_RUBY
	rvm_setup
	s=$?
	if [ $s -ne 0 ] ; then
		echo $p: RVM SETUP FAILED status=$s 1>&2
	fi
else
	echo $p: RVM NOT AVAILABLE or FAILED
fi

## XXX if rvm+ruby installed, should save ~/.rvm to output disk
## so we can repeat the assessment if it fails
if $net_rvm_setup ; then
	if [ -d "$rvm_path" ] ; then
		tar cf $VMOUTPUTDIR/rvm.tar -C "$swamp_dir" --exclude='.rvm/src/*' --exclude='.rvm/log/*' --exclude '.rvm/archives/*' .rvm
	fi
fi

## log where it is
t=`which ruby 2>/dev/null`
if [ -n "$t" ] ; then
	echo $p: ruby is $t
	$t --version
else
	echo $p: NO RUBY AVAILABLE 1>&2
	## XXX error exit, but let ruby-assess error out
fi


## probably TERM=dumb is correct for all assessments, but ...
TERM=$SAVE_TERM

echo
echo $p: setup environment
export BUILD_DIR="${HOME}/build"
export TOOL_DIR="${HOME}/tool"
export RESULTS_DIR="${HOME}/results"
export SCRIPTS_DIR=${HOME}/$(untar "${VMINPUTDIR}/scripts.tar.gz")
#export SCRIPTS_DIR="${HOME}/scripts"
export PYTHONPATH="${SCRIPTS_DIR}/lib:${PYTHONPATH}"

echo
echo $p: start ruby_assess
python3 -B -m ruby_assess --printVersion --printPlatform ${VMINPUTDIR} ${VMOUTPUTDIR} ${BUILD_DIR} ${TOOL_DIR} ${RESULTS_DIR}
